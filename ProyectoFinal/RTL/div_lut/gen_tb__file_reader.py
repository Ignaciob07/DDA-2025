# IN ORDER TO WORK keep this format

# module lut_atan #(
#     parameter NB_DATA_IN    = 8,
#     parameter NB_DATA_OUT   = 16
# ) (
#     output [NB_DATA_OUT - 1 : 0] o_atan      ,
#     input  [NB_DATA_IN  - 1 : 0] i_data_i    ,
#     input  [NB_DATA_IN  - 1 : 0] i_data_q    ,
#     input                        i_clock     ,
#     input                        i_rst_n    
# );

# inputs : i_
# outputs: o_

import math
import numpy as np
import os
import re

def extract_ports(verilog_file):
    with open(verilog_file, "r") as f:
        content = f.read()

    # Regex to match signals starting with "i_" (inputs) or "o_" (outputs)
    pattern = re.findall(r"\b(i_[\w_]+|o_[\w_]+)\b", content)

    # Separate inputs and outputs
    inputs = {sig for sig in pattern if sig.startswith("i_")}
    outputs = {sig for sig in pattern if sig.startswith("o_")}

    return inputs, outputs

verilog_file_name = "lut_atan" # CHANGE FILE NAME

script_dir = os.path.dirname(os.path.abspath(__file__))
verilog_filename = os.path.join(script_dir, verilog_file_name + ".v") 

# Extract inputs and outputs
inputs, outputs = extract_ports(verilog_filename)

tb_filename = os.path.join(script_dir, verilog_file_name + "_template_file_reader.v")

inputs = [item for item in inputs if item not in ['i_clock', 'i_rst_n']]

dir_replaced = script_dir.replace("\\", "/")

with open(tb_filename, "w") as f:

    f.write(f"//----------------- AUTOGENERATED ----------------------\n\n")

    f.write(f"parameter INPUT_FILE  = {'"'}{dir_replaced}{'/input_data.txt"'};\n")
    f.write(f"parameter OUTPUT_FILE = {'"'}{dir_replaced}{'/expected_output.txt"'};\n\n")

    f.write(f"integer input_fd, output_fd, scan_in, scan_out;\n")
    f.write(f"integer test_passed;\n")
    for out in outputs:
        f.write(f"reg [NB_DATA_OUT-1:0] expected_out_{out};\n")

    f.write(f"\ninitial begin\n")
    f.write(f"    test_passed = 1;\n")
    f.write(f"    i_clock = 0;\n")
    f.write(f"    i_rst_n = 0;\n")
    f.write(f"    #10 i_rst_n = 1;\n\n")
    f.write(f"    // Open files\n")
    f.write(f"    input_fd = $fopen(INPUT_FILE, {'"r"'});\n")
    f.write(f"    output_fd = $fopen(OUTPUT_FILE, {'"r"'});\n")
    f.write(f"    if (input_fd == 0 || output_fd == 0) begin\n")
    f.write(f"        $display({'"Error: Could not open input or output file."'});\n")
    f.write(f"        $finish;\n")
    f.write(f"    end\n")

    f.write(f"// Read and apply inputs\n")
    f.write(f"    while (!$feof(input_fd) && !$feof(output_fd)) begin\n")
    f.write(f"        scan_in = $fscanf(input_fd, ")
    for i, input in enumerate(inputs):
        if len(inputs) == 1:
            f.write(f"{'"%d\\n"'}, ")
        elif i == len(inputs) - 1:
            f.write(f"{'%d\\n"'}, ")
        else:
            f.write(f"{'"%d '}")
    
    for i, input in enumerate(inputs):
        if len(inputs) == 1:
            f.write(f"{input});\n")
        elif i == len(inputs) - 1:
            f.write(f" {input});\n")
        else:
            f.write(f"{input}, ")
            
    f.write(f"        scan_out = $fscanf(output_fd, ")
    for i, output in enumerate(outputs):
        if len(outputs) == 1:
            f.write(f"{'"%d\\n"'}, ")
        elif i == len(outputs) - 1:
            f.write(f"{'%d\\n"'}, ")
        else:
            f.write(f"{'"%d '}")
    
    for i, output in enumerate(outputs):
        if len(outputs) == 1:
            f.write(f"expected_out_{output});\n")
        elif i == len(outputs) - 1:
            f.write(f" expected_out_{output});\n")
        else:
            f.write(f"expected_out_{output}, ")
    
    f.write(f"        if (scan_in != 2 || scan_out != 1) begin\n")
    f.write(f"            $display({'"Error reading files"'});\n")
    f.write(f"            $finish;\n")
    f.write(f"        end\n")
    f.write(f"        \n")
    f.write(f"        @(posedge i_clock); // Wait for one clock cycle\n")
    
    for i, output in enumerate(outputs):
        f.write(f"        if ({output} !== expected_out_{output}) begin\n")
        f.write(f"            $display({'"Mismatch: expected=%d, got=%d at time: %t"'}, expected_out_{output}, {output}, $time);\n")
        f.write(f"            test_passed = 0;\n")
        f.write(f"        end\n")
        f.write(f"        else begin\n")
        f.write(f"            $display({'"MATCH AT TIME %t"'}, $time);\n")
        f.write(f"        end\n")
        f.write(f"    end\n")
        f.write(f"\n")
        
    f.write(f"// Close files\n")
    f.write(f"    $fclose(input_fd);\n")
    f.write(f"    $fclose(output_fd);\n")
    f.write(f"    if(test_passed)\n")
    f.write(f"        $display({'"TEST PASSED"'});\n")
    f.write(f"    else\n")
    f.write(f"        $display({'"TEST  FAILED"'});\n")
    f.write(f"    $finish;\n")
    f.write(f"end\n")
    
    f.write(f"\n//----------------- ENDAUTOGENERATED ----------------------\n\n")


print("Inputs:", inputs)
print("Outputs:", outputs)

